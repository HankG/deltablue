
Original (Buggy) benchmark.
http://labs.oracle.com/people/mario/java_benchmarking/index.html

Updated faster java benchmark.
https://community.cablelabs.com/svn/OCAPRI/tags/RI-I1_1_1-REL-A/ri/ODLSrc/OCAP-1.0/jvm/Sun/src/share/javavm/test/COM/sun/labs/kanban/DeltaBlue/DeltaBlue.java

C Benchmark (And the original slow Java version, plus a few others)
http://www.cl.cam.ac.uk/~mr10/Bench.html

Dart benchmark
https://github.com/dart-lang/benchmark_harness


Results, allowing enough iterations for the VM's to warm up.
gcc -O3   1x
java      1.2x
DartVM    1.3x
d8        1.6x
gcc       2.5x


Comments:

The DartVM uses more memory than V8, and less than the JVM. The DartVM and V8
start up faster than the JVM (Not much of a surprise there). Snapshots didn't
affect the startup speed of the DartVM. Probably too little code in this
benchmark to be a measurable benefit.


java version "1.6.0_26"
gcc version 4.6.3 (Ubuntu/Linaro 4.6.3-1ubuntu5) 
V8 version 3.17.15.1
Dart VM version: 0.4.2.8_r20259 (Tue Mar 19 23:33:54 2013)

DeltaBlue	Java		10x	9.3 ms
DeltaBlue	Java		100x	2.96 ms
DeltaBlue	Java		1000x	0.898 ms
DeltaBlue	Java		10000x	0.5229 ms
DeltaBlue	Java		100000x	0.48908 ms

DeltaBlue	C	gcc	10x	0ms
DeltaBlue	C	gcc	100x	1ms
DeltaBlue	C	gcc	1000x	0.98ms
DeltaBlue	C	gcc	10000x	0.993ms
DeltaBlue	C	gcc	100000x	0.9927ms

DeltaBlue	C	gcc -O3	10x	0ms
DeltaBlue	C	gcc -O3	100x	0.4ms
DeltaBlue	C	gcc -O3	1000x	0.39ms
DeltaBlue	C	gcc -O3	10000x	0.416ms
DeltaBlue	C	gcc -O3	100000x	0.3936ms

DeltaBlue	d8		10x	4.1ms
DeltaBlue	d8		100x	1.16ms
DeltaBlue	d8		1000x	0.729ms
DeltaBlue	d8		10000x	0.6636ms
DeltaBlue	d8		100000x	0.65464ms

DeltaBlue	Dart		10x	5.9ms
DeltaBlue	Dart		100x	1.24ms
DeltaBlue	Dart		1000x	0.636ms
DeltaBlue	Dart		10000x	0.536ms
DeltaBlue	Dart		100000x	0.55263ms
